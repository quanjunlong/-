from pandas import read_csv
from datetime import datetime
#데이터전처리
def parse(x):
    return datetime.strptime(x, '%Y %m %d %H')
#데이터 변환 함수만들기
dataset = read_csv("pollutionraw.csv", parse_dates=[["year","month","day","hour"]], index_col=0, date_parser=parse)
#parse_dates : 날짜를 datetime으로 변환할지의 여부, 기본값은 False이며 True일 경우 모든 칼럼에 다 적용된다. 리스트를 넘기면 변환할 칼럼을 지정할 수 있는데, [1,2,3]을 넘기면 각각의 칼럼을 datetime으로 변환하고, [[1,3]]을 넘기면 1,3 번 칼럼을 조합해서 하나의 datetime으로 변환한다
#date_parser : 날짜 변환시 사용할 함수
#만약 테이블 내의 특정한 열을 행 인덱스로 지정하고 싶으면 index_col 인수를 사용

dataset.drop("No", axis=1, inplace=True)

#컬럼삭제, 원데이터 교체
dataset.columns = ["pollution", "dew", "temp", "press", "wnd_dir", "wnd_spd", "snow", "rain"]
#컬럼명변경
dataset.index.name="date"
#index명변경
dataset["pollution"].fillna(0, inplace=True)
#na값을0으로변경
dataset= dataset[24:]
#처음 24개 행 삭제
print(dataset.head(5))
#summarize first 5 rows
dataset.to_csv("pollution.csv")

from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM


#load dataset
dataset = read_csv("pollution.csv", header=0, index_col=0)
values = dataset.values
#specify columns to plot
groups = [0,1,2,3,5,6,7]
i = 1
#plot each columns 
pyplot.figure()
for group in groups: 
    #for 변수 in 리스트(또는 튜플, 문자열):
    #수행할 문장1
    #수행할 문장2
    pyplot.subplot(len(groups),1, i)
    pyplot.plot(values[:,group])
    pyplot.title(dataset.columns[group], y=0.5, loc="right")
    i += 1 #i값누적
pyplot.show()

def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg
  
  
dataset = read_csv("pollution.csv", header=0, index_col=0)
values = dataset.values
#load dataset
encoder = LabelEncoder()
values[:,4] = encoder.fit_transform(values[:,4])
#범주형데이터 처리
values = values.astype("float32")
#float32로 변환
scaler = MinMaxScaler(feature_range=(0,1))
scaled = scaler.fit_transform(values)
#데이터 normalization
reframed = series_to_supervised(scaled, 1, 1)
#학습데이터 시계열변환
reframed.drop(reframed.columns[[9,10,11,12,13,14,15]], axis = 1, inplace=True)
print(reframed.head())


values=reframed.values
#값만추출
n_train_hours = 365*24
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
#train test 데이터 분류
train_x, train_y = train[:, :-1], train[:, -1]
test_x, test_y = test[:, :-1], test[:, -1]
#train, test 독립변수, 종속변수 추출
train_x = train_x.reshape((train_x.shape[0], 1, train_x.shape[1]))
test_x = test_x.reshape((test_x.shape[0], 1, test_x.shape[1]))
print(train_x.shape, train_y.shape, test_x.shape, test_y.shape)
train_x.shape[1]
#데이터 3차원 변환

model = Sequential()
model.add(LSTM(50, input_shape=(train_x.shape[1], train_x.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')
# design network
history = model.fit(train_x, train_y, epochs=10000, batch_size=72, validation_data=(test_x, test_y), verbose=2, shuffle=False)


# plot history
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
pyplot.show()


yhat = model.predict(test_x)
test_x = test_x.reshape((test_x.shape[0], test_x.shape[2]))
#예측모델 만들기
inv_yhat = concatenate((yhat, test_x[:, 1:]), axis =1)
#같은 index로 데이터합치기
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:, 0]
#정규화데이터 실제값 반환
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_x[:, 1:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:, 0]
#검증데이터 실제값 반환
rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)


pyplot.plot(inv_y, label="test")
pyplot.plot(inv_yhat, label="predict")
pyplot.legend()
pyplot.show()


from numpy import mean
rmse/mean(inv_yhat)
